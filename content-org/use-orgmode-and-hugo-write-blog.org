#+HUGO_BASE_DIR: ~/Dropbox/org-notes/blog
#+HUGO_SECTION: ./post
#+TITLE: 使用 org-mode 和 hugo 写 BLOG
#+DATE: 2018-10-08
#+options: author:nil
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_TAGS: 
#+HUGO_CATEGORIES: 
#+HUGO_DRAFT: false

* 缘起
  =org-mode= 是一个很强的纯文本语法格式，自己非常喜欢 =org-mode= ，因此自己使用 =org-mode= 来记录自己的笔记。当自己要开始写 BLOG 的时候，就决定决定使用 =org-mode= 来作为自己 BLOG 管理工具，之前是使用 emacs 的插件 [[https://github.com/CodeFalling/blog-admin][blog-admin]] 和 [[https://hexo.io/][hexo]] 生成自己的 BLOG，但是自己不是很喜欢这种组合 [[https://github.com/CodeFalling/blog-admin][blog-admin]] 。有两个原因：一个是 [[https://github.com/CodeFalling/blog-admin][blog-admin]] 已经不怎么更新了，还有一个就是自己不怎么喜欢 [[https://hexo.io/][hexo]] (我自己不怎么喜欢node)。

  因此我就选择了以下的组合。
  
  - [[https://gohugo.io/][hugo]] : 使用 Golang 开发的静态 BLOG 工具
  - [[https://ox-hugo.scripter.co/][ox-hugo]] : 用于把 =*.org= 转为 hugo 可以识别的 =*.md=
  - [[https://github.com/masasam/emacs-easy-hugo][easy-hugo]]
  - 当然还少不了 [[https://orgmode.org/][orgmode]]
  
使用上面说的工具的组合，那么写一篇 BLOG 的变为如下：

  1. 使用 org-mode heading 创建文章
  2. 写文章
  3. 使用 ox-hugo 生成 markdown 文档
  4. 使用 easy-hugo 预览(可选)
  5. 发布 BLOG
  

这里使用到了两个工具：ox-hugo 和 easy-hugo, 接下就介绍这两个工具。

#+BEGIN_QUOTE
其实 hugo 原生支持渲染 orgmode 文件，但是它所使用的 markdown 渲染引擎比 orgmode 的渲染引擎要强大的多，这是使用 ox-hugo 的原因之一。
#+END_QUOTE
  
* ox-hugo: org 为 markdown

  [[https://ox-hugo.scripter.co/][ox-hugo]] 可以将 org 文件转成 hugo 兼容的 markdown 文件, 也可生成前端格式文件（如 toml 和 yaml）。

  可以将你的 orgmode 博文，生成指定的 markdown 文件，这只需要一条指令就够了（官方默认 =C-c C-e H h=），并且，它还会自动更正你的文章修改时间 ，markdown 文件中的 lastmod 值。但让也可以自动生成相应的 markdonw 文件，不用每次都执行 =C-c C-e H h=

  至此，你就已经可以按照常规的方法来预览、发布你的博文了。不过还有一个扩展没有介绍—— easy-hugo 。

  #+BEGIN_QUOTE
  导出的 markdown 文件会编译不过，原因是因为生成的 =author= 标签， =hugo= 报错。因此可以把这个 =author= 禁止掉就可以了。
  #+END_QUOTE

** 入门
*** ScreenShot

    [[file:use-orgmode-and-hugo-write-blog/one-post-per-subtree.png]]

    [[file:use-orgmode-and-hugo-write-blog/one-post-per-file.png]]

*** 安装

    需要 emacs 24.4+ 和 Org 9.0+

*** 配置

    =spacemacs= 中 =ox-hugo= 的配置, 在 =dotspacemacs/user-config= 中添加配置：

    #+BEGIN_SRC emacs-lisp
    (defun dotspacemacs/user-config ()
      ;; Other stuff
      ;; ..

      ;; ox-hugo config
      (use-package ox-hugo
        :ensure t            ;Auto-install the package from Melpa (optional)
        :after ox)
      (use-package ox-hugo-auto-export) ;If you want the auto-exporting on file saves
      (use-package ox-hugo
        :ensure t            ;Auto-install the package from Melpa (optional)
        :after ox)
      (use-package ox-hugo-auto-export) ;If you want the auto-exporting on file saves
      )
    #+END_SRC

    其他的配置参考 [[https://ox-hugo.scripter.co/][ox-hugo]] 官方文档。

** Org To Hugo
*** 基于单个文件的导出

    #+caption: Hugo front-matter translation for subtree-based exports

    | Hugo front-matter (TOML)	     | Org                                  |
    |----------------------------------+--------------------------------------|
    | title = "foo"	                | =#+title: foo=                       |
    | date = 2017-07-24                | =#+date: 2017-07-24=                 |
    | publishDate = 2018-01-26	     | =#+hugo_publishdate: 2018-01-26=     |
    | expiryDate = 2999-01-01	      | =#+hugo_expirydate: 2999-01-01=      |
    | lastmod = <current date>	     | =#+hugo_auto_set_lastmod: t=         |
    | tags = ["toto", "zulu"]	      | =#+hugo_tags: toto zulu=             |
    | categories = ["x", "y"]	      | =#+hugo_categories: x y=             |
    | draft = true	                 | =#+hugo_draft: true=                 |
    | draft = false	                | =#+hugo_draft: false=                |
    | weight = 123	                 | =#+hugo_weight: 123=                 |
    | tags_weight = 123	            | =#+hugo_weight: :tags 123=           |
    | categories_weight = 123          | =#+hugo_weight: :categories 123=     |
    | weight = 123 (in [menu.foo])	 | =#+hugo_menu: :menu foo :weight 123= |

*** 格式化

    下表是 orgmode 标记语言转换 markdown 标记语言的格式:

    #+caption: Org markup to Markdown markup

    | Org	             | Markdown                                                       |
    |---------------------+----------------------------------------------------------------|
    | =*bold*=	        |  =**bold**=                                                    |
    | =/italics/=	     | =_italics_=                                                    |
    | =\=monospace\==     | 	=`monospace`=                                              |
    | =~key-binding~=	 | =`key-binding`=                                                |
    |                     | - if org-hugo-use-code-for-kbd is nil [default]                |
    | =~key-binding~=	 | =<kbd>key-binding</kbd>=                                       |
    |                     | - if org-hugo-use-code-for-kbd is non-nil                      |
    |                     | - Requires CSS to render the <kbd> tag as something special.   |
    | =+strike-through+=  | 	~~strike-through~~                                         |
    | =_underline_=	   | =<span class = "underline">underline</span>=                   |
    |                     | - Requires CSS to render this underline class as an underline. |

** 进阶
*** 自动生成 markdown 文件配置

    在 =hugo= 的 =base= 目录下新建一个目录 =content-org=，并且新建文件 =.dir-locals.el=, 内容如下：

    #+BEGIN_SRC emacs-lisp
    (("content-org/"
      . ((org-mode . ((org-hugo-auto-export-on-save . t))))))
    #+END_SRC

    新建目录和文件后的目录结构如下：

    #+BEGIN_EXAMPLE
    <HUGO_BASE_DIR>
      ├── config.toml
      ├── content
      ├── content-org      <-- Org 文件写到这个目录
      ├── static
      ├── themes
      └── .dir-locals.el
    #+END_EXAMPLE

    还没有完，需要在每个 =org= 文件后添加如下内容，这样会很麻烦，但是我们可以使用 =yassnnpets= 来完成：

*** Org 文件中包含图片

    把图片放到 org 文件目录下，使用如下语法就可以引用图片: 
    
    #+BEGIN_EXAMPLE
    [[file:image_path]]
    #+END_EXAMPLE

* easy-hugo: 管理博客

  #+BEGIN_EXAMPLE
  可选
  #+END_EXAMPLE

  easy-hugo 是 hugo 官方推荐的用于 emacs 管理 hugo 的插件。

  =M-x easy-hugo=

* 附录
** 我的Snipptes

   #+BEGIN_EXAMPLE
   # -*- mode: snippet -*-
   # name: hugo
   # key: hugo
   # --
   #+HUGO_BASE_DIR: ~/Dropbox/org-notes/blog
   #+HUGO_SECTION: ./post
   #+TITLE: $1
   #+DATE: `(format-time-string "%Y-%m-%d")`
   #+options: author:nil
   #+HUGO_AUTO_SET_LASTMOD: t
   #+HUGO_TAGS: $2
   #+HUGO_CATEGORIES: $3
   #+HUGO_DRAFT: false

   $0

   * Footnotes
   * COMMENT Local Variables                          :ARCHIVE:
   # Local Variables:
   # org-hugo-auto-export-on-save: t
   # End:
   #+END_EXAMPLE

* 参考

- [[https://ox-hugo.scripter.co/]]
- [[https://github.com/masasam/emacs-easy-hugo]]

* Footnotes
* COMMENT Local Variables                          :ARCHIVE:
  # Local Variables:
  # org-hugo-auto-export-on-save: t
  # End:
