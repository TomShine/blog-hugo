#+HUGO_BASE_DIR: ~/blog
#+HUGO_SECTION: ./post
#+TITLE: macOS 设置指南
#+DATE: 2018-10-08
#+options: author:nil
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_TAGS:
#+HUGO_CATEGORIES:
#+HUGO_DRAFT: true


* System Preferences

对系统设置做一些调整。
** 触控板

- 系统设置 > 触控板
  - 光标与点击
  - ✓ 轻拍来点按
  - ✓ 辅助点按
  - ✓ 查找
  - ✓ 三指拖移
  - 滚动缩放
  - ✓ 默认全选
  - 更多手势
  - ✓ 默认全选

** Dock

- 置于屏幕上的位置：右边
- 设置 Dock 图标更小（大小随个人喜好）
- ✓ 自动显示和隐藏 Dock： Command + Option + D

** Finder

- Finder > 显示
    - 显示标签页栏
    - 显示路径栏
    - 显示状态栏
    - 自定工具栏 > 去除所有按钮，仅剩搜索栏
* Finder > 偏好设置
    * 通用
    * 开启新 Finder 窗口时打开：HOME「用户名」目录
    * 边栏
    * 添加 HOME「用户名」目录 和 创建代码文件目录
    * 将共享的(shared) 和 标记(tags) 目录去掉
* 菜单栏

* 去掉蓝牙等无需经常使用的图标
* 将电池显示设置为百分比
Spotlight

* 去掉字体和书签与历史记录等不需要的内容
* 设置合适的快捷键
互联网帐户

* 添加 iCloud 用户，同步日历，联系人和 Find my mac 等等
Xcode

从 App store 或苹果开发者网站安装 Xcode 。
紧接着，安装 Xcode command line tools，运行：
xcode-select --install
运行命令后，按照指引，你将完成 Xcode command line tools 安装。
Note: 如果你不是一名 iOS 或 OS X 开发者，可以不安装 XCode，直接安装 Xcode command line tools 。安装完成后，可以直接在 terminal 中使用主要的命令，比如：make, GCC, clang, perl, svn, git, size, strip, strings, libtool, cpp等等。
如果你想了解 Xcode command line tools 包含多少可用的命令，可以到 /Library/Developer/CommandLineTools/ 查看。以下为其中的命令列表：
- ar
- as
- asa
- bison
- BuildStrings
- c++
- c89
- c99
- cc
- clang
- clang++
- cmpdylib
- codesign_allocate
- CpMac
- cpp
- ctags
- ctf_insert
- DeRez
- dsymutil
- dwarfdump
- dyldinfo
- flex
- flex++
- g++
- gatherheaderdoc
- gcc
- gcov
- GetFileInfo
- git
- git-cvsserver
- git-receive-pack
- git-shell
- git-upload-archive
- git-upload-pack
- gm4
- gnumake
- gperf
- hdxml2manxml
- headerdoc2html
- indent
- install_name_tool
- ld
- lex
- libtool
- lipo
- lldb
- lorder
- m4
- make
- MergePef
- mig
- mkdep
- MvMac
- nasm
- ndisasm
- nm
- nmedit
- otool
- pagestuff
- projectInfo
- ranlib
- rebase
- redo_prebinding
- ResMerger
- resolveLinks
- Rez
- RezDet
- RezWack
- rpcgen
- segedit
- SetFile
- size
- SplitForks
- strings
- strip
- svn
- svnadmin
- svndumpfilter
- svnlook
- svnrdump
- svnserve
- svnsync
- svnversion
- unifdef
- unifdefall
- UnRezWack
- unwinddump
- what
- xml2man
* yacc
Homebrew

什么是Homebrew？
官方介绍："Homebrew is the easiest and most flexible way to install the UNIX tools Apple didn’t include with OS X."
其实Homebrew就是一个包管理工具，类似于 Ubuntu 的 apt 工具，CentOS的yum。
安装：
$ /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

建议安装之前删除已经安装的 Fink 和 Macports , 这样 homebrew 更新快速，如果 formulae 中的源代码下载地址被GFW墙掉，可以直接修改rb脚本中的源代码下载地址。
基本使用

## 安装一个package
$ brew install <package_name>

## 更新 Homebrew 在服务器端上的包目录
$ brew update

$ 查看package是否需要更新
$ brew outdated

## 更新package
$ brew upgrade <package_name>

## Homebrew 将会把老版本的包缓存下来，以便当你想回滚至旧版本时使用。但这是比较少使用的情况，当你想清理旧版本的包缓存时，可以运行
$ brew cleanup

## 查看安装过的包列表（包括版本号）
$ brew list --versions

Cask

Homebrew Cask是一套建立在 homebrew 基础上的Mac软件安装命令行工具，它主要用于安装和管理 macOS 的图形化界面，例如 Google Chrome 等。
安装

brew install caskroom/cask/brew-cask
brew cask install google-chrome // 安装 Google 浏览器
brew update && brew upgrade brew-cask && brew cleanup // 更新

搜索

如果你想查看 cask 上是否存在你需要的 app，可以到 caskroom.io 进行搜索。
文件预览插件

有些 插件 可以让 Mac 上的文件预览更有效，比如语法高亮、markdown 渲染、json 预览等等。
brew cask install qlcolorcode
brew cask install qlstephen
brew cask install qlmarkdown
brew cask install quicklook-json
brew cask install qlprettypatch
brew cask install quicklook-csv
brew cask install betterzipql
brew cask install webpquicklook
brew cask install suspicious-package

OS X 图形界面程序

brew cask install cheatsheet
brew cask install google-chrome
...

常用命令

brew cask search  ## 列出所有可以被安装的软件
brew cask search drop ## 查找所有和 drop 相关的应用
brew cask info thunder ## 查看 迅雷 应用的信息，这货安装的可是最新版本的迅雷哦！
brew cask uninstall qq ## 卸载 QQ

特别注意: Homebrew Cask 是将应用程序放置在 /opt/homebrew-cask/Caskroom/ 下，会在你的目录中的「应用程序」文件夹中创建一个类似快捷方式的软链接。
iTerm2

iTerm2 是 MAC 下最好的终端工具。可以简单的认为，iTerm2 是配置完毕开箱即用的 Tmux。
但Tmux有以下一些缺点：
* 查找 terminal 的输出历史内容需要切换到 vim 模式。在该模式下复制使用的是 vim 的查找，增加了认知负担；
* 和各种工具兼容性比较差，尤其是 vim 和 emacs 的 powerline；
* 自有样式，与系统的样式冲突。
安装iTerm2

brew install iterm2

iTerm2 的一些特色功能如下：

* 标签变色：iTerm2 的标签的颜色会变化，以指示该 tab 当前的状态。当该标签有新输出的时候，标签会变成洋红色；新的输出长时间没有查看，标签会变成红色。可在设置中关掉该功能。
* 智能选中：在 iTerm2 中，双击选中，三击选中整行，四击智能选中（智能规则可 配置 ），可以识别网址，引号引起的字符串，邮箱地址等。（很多时候双击的选中就已经很智能了）。在 iTerm2 中，选中即复制。即任何选中状态的字符串都被放到了系统剪切板中。
* Command 键使用, 按住⌘键：
    * 可以拖拽选中的字符串
    * 点击 url：调用默认浏览器访问该网址；
    * 点击文件 ：调用默认程序打开文件；
    * 如果文件名是 filename:42，且默认文本编辑器是 MacVim、Textmate 或 BBEdit，将会直接打开到这一行；
    * 点击文件夹 ：在 finder 中打开该文件夹；
    * 同时按住option键，可以以矩形选中，类似于 vim 中的 ctrl v 操作。
* Meta键：在 emacs 中，meta 键的使用非常频繁，而 OSX 系统没有提供meta 键。在 iTerm2 中可以选择左右两个的 Option 键作为 meta 键。官方推荐的配置如下图所示。右 Option 键依然是 OSX 的默认功能（输入特殊字符）。
* 自动补全：
    * 补齐命令 : ⌘+; 弹出自动补齐窗口，列出曾经使用过的命令
    * 历史记录 : ⌘+Shift+h 弹出历史记录窗口
* ：Exposé Tabs：
    * ⌘+Option+e 全屏展示所有的 tab，可以搜索
* 高亮当前鼠标的位置：⌘+/
* 配色：可以自由定制配色，iTerm2 主题 收集了大量 iTerm2 的主题。在其 github repo 里下载对应的 xxx.itermcolors 文件，双击安装使用。
常用快捷键

* 切换 tab：⌘+←, ⌘+→, ⌘+{, ⌘+}。⌘+数字直接定位到该 tab
* 新建 tab：⌘+t
* 顺序切换 pane：⌘+\[, ⌘+\]
* 按方向切换 pane：⌘+Option+方向键
* 分屏：⌘+d 水平切分，⌘+Shift+d 垂直切分
* 智能查找，支持正则查找：⌘+f
* 打开 profile 选择: ⌘+o
Oh-My-Zsh

Zsh

* 安装 zsh, zsh 在MAC里面已经默认安装
* 切换 zsh, 安装完成后设置当前用户使用 zsh：chsh -s /bin/zsh，根据提示输入当前用户的密码就可以了
安装

oh-my-zsh是一套为方便配置 zsh 开发的开源框架，主要功能是增加了插件和主题
1. 自动安装：
wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh
2. 手动安装：
git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
cp $HOME/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
配置

zsh 的配置主要集中在用户当前目录的 .zshrc 里，用 vim 或你喜欢的其他编辑器打开 .zshrc
自定义自己的zsh
alias cls='clear'
alias ll='ls -l'
alias la='ls -a'
alias vi='vim'
alias javac="javac -J-Dfile.encoding=utf8"
alias grep="grep --color=auto"
alias -s html=mate   ## 在命令行直接输入后缀为 html 的文件名，会在 TextMate 中打开
alias -s rb=mate     ## 在命令行直接输入 ruby 文件，会在 TextMate 中打开
alias -s py=vi       ## 在命令行直接输入 python 文件，会用 vim 中打开，以下类似
alias -s js=vi
alias -s c=vi
alias -s java=vi
alias -s txt=vi
alias -s gz='tar -xzvf'
alias -s tgz='tar -xzvf'
alias -s bz2='tar -xjvf'

zsh的厉害之处在于不仅可以设置通用别名，还能针对文件类型设置对应的打开程序，比如：
alias -s html=mate      ## 意思就是你在命令行输入 hello.html，zsh会为你自动打开 TextMat 并读取 hello.html；
alias -s gz='tar -xzvf' ## 表示自动解压后缀为 gz 的压缩包。

插件

oh-my-zsh项目提供了完善的插件体系，相关的文件在 ~/.oh-my-zsh/plugins 目录下，默认提供了100多种，大家可以根据自己的实际学习和工作环境采用，想了解每个插件的功能，只要打开相关目录下的 zsh 文件看一下就知道了。
插件也是在 .zshrc 里配置，找到 plugins 关键字，你就可以加载自己的插件了，系统默认加载 git ，你可以在后面追加内容，如下：
plugins=(git autojump osx)

插件简单介绍:
1. *git：+ 处于一个 git 受控的目录下时，Shell 会明确显示 「git」和 branch，另外对 git 很多命令进行了简化，例如 gco=’git checkout’、gd=’git diff’、gst=’git status’、g=’git’等等，熟练使用可以大大减少 git 的命令长度，命令内容可以参考 ~/.oh-my-zsh/plugins/git/git.plugin.zsh
2. *osx：+ tab 增强，quick-look filename 可以直接预览文件，man-preview grep 可以生成 grep手册 的pdf 版本等。
3. *autojump：+ zsh 和 autojump 的组合形成了 zsh 下最强悍的插件，今天我们主要说说这货。
autojump

1. 安装，如果你用 Mac，可以使用 brew 安装：brew install autojump
2. 配置，在 zshrc 中添加: [[ -s ~/.autojump/etc/profile.d/autojump.sh ]] && . ~/.autojump/etc/profile.d/autojump.sh
3. 使用
brew

Homebrew 的 macOS 的包管理工具, 这个插件提供以下功能:
* 创建 brews 别名列出所有已经通过 brew 安装的软件(brew list -1)
* 给 brew 添加命令补全
colored-man-pages

man page 添加颜色
command-not-found

这个命令只支持 Ubuntu 和 openSUSE, 如果一个命令没有在 $PATH 找到， 它会使用ubuntu的command-not-found包去找它，或者建议错误的拼写:
$ gedit
The program 'gedit' is currently not installed. You can install it by typing:
sudo apt-get install gedit
bash: gedit: command not found

common-aliases

收集最有用的 zsh alias, 如果用户使用它们自己的 alias, 它们默认不启用:
Alias	Command
*l+	ls -lFh
*la+	ls -lAFh
*lr+	ls -tRFh
*lt+	ls -ltFh
*ll+	ls -l
*ldot+	ls -ld .+
*lS+	ls -1FSsh
*lart+	ls -1Fcart
*lrt+	ls -1Fcrt
*zshrc+	$EDITOR ~/.zshrc
*h+	history
*p+	(processes for current user)
Alias to place at the end of command:
Alias	Command
*H+	| head
*T+	| tail
*G+	| grep
*L+	| less
*M+	| most
*LL+	2>&1
*CA+	2>&1
*NE+	2> /dev/null
*NUL+	> /dev/null 2>&1
*P+	2>&1
* Interactive mode for rm, cp, mv
* Completion for the python interpreter
docker

* 自动补全 docker 的所有命令
* 可通过 tab 来时显示合适的 ContainIDS 和 images
ecode64

base64 编码和解码一个字符串
gnu-utils

gnu 工具集的插件，命令补全
httpie

httpie 命令补全
history

给 history 命令提供几个方便的别名:
Alias	Description
*h+	List your command history. Equivalent to using history
*hsi+	When called without an argument you will get help on grep arguments
hsi[search text]	Performs a *case insensitive+ grep search on your command history, looking for commands that match the argument provided
jsontool

Command	Description
*pp_json+	pretty prints json
*is_json+	returns true if valid json; false otherwise
*urlencode_json+	returns a url encoded string for the given json
*urldecode_json+	returns decoded json for the given url encoded string
osx

Command	Description
tab	Open the current directory in a new tab
ofd	Open the current directory in a Finder window
pfd	Return the path of the frontmost Finder window
pfs	Return the current Finder selection
cdf	cd to the current Finder directory
pushdf	pushd to the current Finder directory
quick-look	Quick-Look a specified file
man-preview	Open a specified man page in Preview app
showfiles	Show hidden files
hidefiles	Hide the hidden files
itunes	Control iTunes. User itunes -h for usage details
spotify	Control Spotify and search by artist, album, track and etc
pip

pip 的命令补全
redis-cli

redis-cli 命令补全
supservisor

supservisord 和 supervisorctl 的 tab 补全
svn

添加了几个函数处理，显示当前目录 svn 的 repo的状态
svn-fast-info

加快大 svn repository 的可视化速度
vagrant

vagrant 的命令补全
virtualenvwrapper

加载 python 的 virtualenvwrapper 的 shell 工具，当进入 git repository 与它相配的名字，他会自动激活 virtualenv
tmuxinator

tmuxinator 的命令补全
Alias	Command
mux	tmuxinator
web-search

web-search 命令行做web搜索，会打开默认浏览器就行搜索
eg:
$ bing oh-my-zsh   ## bing 搜索
$ google oh-my-zsh ## goolge搜索
$ ddg foo bar      ## duckduckgo搜索

zsh_reload

重新加载 zsh 配置文件
Zsh 的启动顺序

zsh 启动过程中会依次读取以下文件：
1. /etc/zshenv
2. $ZDOTDIR/.zshenv（$ZDOTDIR 未设置时默认为$HOME）
3. 如果是 login shell，读取 /etc/zprofile, $ZDOTDIR/.zprofile
4. 如果是 interactive shell，读取 /etc/zshrc, $ZDOTDIR/.zshrc
5. 如果是 login shell，读取 /etc/zlogin, $ZDOTDIR/.zlogin
shell 介绍：
login shell 是用户登陆时，输入用户名和密码后启动的 shell
non-login shell 是登录以后所打开的 shell
interactive shell 在终端上执行，shell 等待你的输入，并且立即执行你提交的命令，跟用户存在交互
non-interactive shell 以 shell script（非交互）方式执行
Mac 下z sh 问题探讨

那么问题来了，在 Mac OS X 中打开 iTerm2.app 或者 Terminal.app 启动的 shell 是什么类型呢？通常来说，应该是 interactive + non-login shell，但实际上却是 interactive + login shell，下面的测试代码可以证明：
[[ -o login ]] && echo 'yes' || echo 'no'
[[ -o interactive ]] && echo 'yes' || echo 'no'
所以，打开 iTerm2.app 或者 Terminal.app 启动的 shell 会读取上述1-5中存在的所有文件，如果其中多个文件均对 PATH环境变量作过设置，那么最终呈现的 PATH 环境变量就会比较复杂，部分路径重复也就不足为奇了。
查看 /etc/zshenv，会发现调用的是/usr/libexec/path_helper，而它加载的正是系统路径，并且将系统路径放在最前。
如果接下来用户在 $ZDOTDIR 中的文件中加载了自己设置的路径并置于最前，再接下来再加载的 /etc/zprofile、/etc/zshrc 可能还会调用 /usr/libexec/path_helper，又造成了系统路径重新被放到最前面，形成了奇葩的 PATH 环境变量系统路径、自设路径、系统路径交错的现象。
了解了这么多，解决方法也很简单，那就是上述1-5中仅让必要的文件涉及 PATH 环境变量。比如在 /etc/zshenv 中通过调用 /usr/libexec/path_helper 设置系统路径，$ZDOTDIR/.zshenv 中将自设路径放在最前，其余文件均不涉及 PATH 环境变量设置。
我的系统是macOS Sierra 10.12.3,没有/zsh/zshenv这个文件
Git

Git and Github

## 安装
$ brew install git

## 查看时候安装成功
$ git --version

## 设置Git帐号(与Github使用的用户名和邮箱一致)
$ git config --global user.name "Your Name Here"
$ git config --global user.email "your_email@youremail.com"
## 这些配置信息将会添加进 ~/.gitconfig 文件中

推荐使用HTTPS方法（另一个是 SSH），将你的代码推送到Github上的仓库。如果你不想每次都输入用户名和密码的话，可以按照此 描述 说的那样，运行：
$ git config --global credential.helper osxkeychain

此外，如果你打算使用SSH方式，可以参考此 链接。
Git Ignore

创建一个新文件 ~/.gitignore ，并将以下内容添加进去，这样全部git仓库将会忽略以下这个文件提到的文件或者目录。
## Folder view configuration files
.DS_Store
Desktop.ini

## Thumbnail cache files
._*
Thumbs.db

## Files that might appear on external disks
.Spotlight-V100
.Trashes

## Compiled Python files
*.pyc

## Compiled C++ files
*.out

## Application specific files
venv
node_modules
.sass-cache
MySQL

安装

使用Homebrew安装MySQL，同时也会安装MySQL的相关的文件。再安装前，可以使用Homebrew查询MySQL的信息，如下:
brew info mysql
\mysql: stable 5.7.17 (bottled)
Open source relational database management system
https://dev.mysql.com/doc/refman/5.7/en/
Conflicts with: mariadb, mariadb-connector-c, mysql-cluster, mysql-connector-c, percona-server
^R
/usr/local/Cellar/mysql/5.7.17 (321 files, 234.4MB) *
  Poured from bottle on 2017-02-21 at 16:03:20
From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/mysql.rb
==> Dependencies
Build: cmake ✔
Required: openssl ✔
==> Requirements
Required: macOS >= 10.7 ✔
==> Options
--with-archive-storage-engine
    Compile with the ARCHIVE storage engine enabled
--with-blackhole-storage-engine
    Compile with the BLACKHOLE storage engine enabled
--with-debug
    Build with debug support
--with-embedded
    Build the embedded server
--with-local-infile
    Build with local infile loading support
--with-test
    Build with unit tests
==> Caveats
We've installed your MySQL database without a root password. To secure it run:
    mysql_secure_installation

To connect run:
    mysql -uroot

To have launchd start mysql now and restart at login:
  brew services start mysql
Or, if you don't want/need a background service you can just run:
  mysql.server start

Note: 这里的信息其实很清楚了，文件的大小，MySQL的版本号，怎么启动，关闭等等。
开始安装：
$ brew update
$ brew install mysql

使用MySQL前，需要做的设置:
unset TMPDIR
mkdir /usr/local/var
mysql_install_db --verbose --user=`whoami` --basedir="$(brew --prefix mysql)" --datadir=/usr/local/var/mysql --tmpdir=/tmp

使用

* 启动 MySQl 服务, 运行 mysql.server:
$ mysql.server start
Starting MySQL
 SUCCESS!
* 关闭 MySQl 服务：
$ mysql.server stop
Shutting down MySQL
.. SUCCESS!
* 获取更多 mysql.server 的相关的命令：
$ mysql.server --help
Usage: mysql.server  {start|stop|restart|reload|force-reload|status}  [ MySQL server options ]
* 启动后就可以登录了，登录命令为:
mysql -uroot -p ## 然后提示输入数据库密码，初始没有密码的情况下直接回车，就进入数据库了
Note: 默认情况下, MySQL用户 root 没有密码，这对本地开发没有影响，但是我们可以设置密码：
$ mysqladmin -u root password 'new-password'
设置开机自自动

使用Homebrew安装的，Homebrew提供了一种开机自启动脚本:
$ brew services start mysql

执行下面的命令:
mkdir -p ~/Library/LaunchAgents
cp /usr/local/Cellar/mysql/5.6.16/homebrew.mxcl.mysql.plist ~/Library/LaunchAgents/ #5.6.16是数据库版本号，根据你当时所安装的版本号自己修改
launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist

遇到问题

等成功安装完成，结果想要登录的时候报了个错误:
ERROR 2002 (HY000): Can not connect to local MySQL server through socket '/tmp/mysql.sock' (2)

找到解决方案，依次执行
unset TMPDIR
bash mysql_install_db --verbose --user=root --basedir="$(brew --prefix mysql)"--datadir=/usr/local/var/mysql --tmpdir=/tmp

Node.js

使用 Homebrew 安装 Node.js:
$ brew update
$ brew install node

一般 Node modules 通常被安装在每个项目的本地文件夹 node_modules
Npm 使用:
## 安装包:
$ npm install <package>     ## 安装在本地项目中
$ npm install -g <package>  ## 安装在全局

## 安装包，并且将其保存你项目中的 `package.json` 文件:
$ npm install <package> --save

## 查看 npm 安装的内容:
$ npm list     ## 本地
$ npm list -g  ## 全局

## 查看过期的包（本地或全局）:
$ npm outdated [-g]

## 更新全部或特别指定一个包:
$ npm update [<package>]

## 卸载包:
$ npm uninstall <package>
Nginx

安装

brew install nginx

安装完以后，可以在终端输出的信息里看到一些配置路径：
* /usr/local/etc/nginx/nginx.conf （配置文件路径）
* /usr/local/var/www （服务器默认路径）
* /usr/local/Cellar/nginx/1.6.2 （貌似是安装路径）
修改 Nginx 配置

server {
   listen       85;            #监听端口
   server_name  localhost;     #监听服务器

   #charset koi8-r;
   #access_log  logs/host.access.log  main;
   location / {
       root   html;
       index  index.html index.htm;
   }

   #error_page  404              /404.html;
   ## redirect server error pages to the static page /50x.html
   #
   error_page   500 502 503 504  /50x.html;
   location = /50x.html {
       root   html;
   }
}

其他命令

修改 /etc/local/etc/nginx/nginx.conf 后，
sudo nginx -s reload #重载配置文件
sudo nginx -s stop #停止 nginx 服务器

Nginx 错误

nginx 403 forbidden

引起nginx 403 forbidden有二种原因:
* 缺少索引文件
* 权限问题
1: 缺少index.html或者index.php文件
server {
    listen       80;
    server_name  localhost;
    index.html index.htm;
    root  /home/shine/www;
}
如果在/home/shine/www下面没有index.html,index.htm的时候，直接访问域名，找不到文件，会报403 forbidden。
2: 权限问题
因为权限问题引起的403，比较难查找，因为一时想不起
server {
    listen       80;
    server_name  localhost;
    index.html index.htm;
    root  /home/shine/www;
}
Web目录放在用户的所属目录下面，nginx的启动用户默认是nginx的，所以对目录根本没有读的权限，这样就会报403错误了。这个时候，把web目录的权限改大，或者是把nginx的启动用户改成目录的所属用户，重起一下就能解决。
Apps

主要列举一些除了上面说的软件，我还经常使用的软件
* 开发者工具(Developer Tool)
* 生产力工具(Productivity)
* CLI Tools
* 办公工具(Office Apps)
* 其他
** Developer Tools

  - Github：Github
  - Dash：程序员查询工具
  - Wireshark：
  - Paw：类似PostMan的工具
  - Tower：Git和SVN管理工具
  -  虚拟机
    - VirtaulBox : 虚拟机
    - Vagrant : 虚拟化管理工具
        - 若需要 Linux 开发环境，直接通过撰写 Vagrantfile 或下载官方 Vagrant Box 部署新環境。
            - vagrant init ubuntu/trusty64
            - vagrant up
            - vagrant ssh
    - Vagrant Manager 提供了在选单列集中管理 VM 的功能（图形化管理Vagrant）
    - Parallels：虚拟机，对Windows集成相当的好
  - 数据库
    - PSequel：PostgreSQL 管理工具
    - Robomongo: MongoDB 管理工具
    - Sequel Pro：MySQL/MariaDB 管理工具
  - 编辑器
      - Vim：编辑器之神, 对于 .vimrc 的不熟的用户可以使用 Vim Bootstrap 自动生成一个界面还不过的配文档。curl 'http://vim-bootstrap.com/generate.vim' --data 'langs=c&langs=python&langs=go&langs=javascript&editor=vim' > ~/.vimrc
      - Emacs, 我使用 Emacs 现在对 Vim 用户最有好的配置 Spacemacs
      - VSCode
  - IDE
      - IntelliJ IDEA
      - PyCharm
      - CLion
      - Goland
  > 推荐搭配支持连接 (ligatures) 的字体使用，如 FiraCode。

** CLI Tools

- ack: 专门代码搜索打造的类 grep 工具
- ag 专门代码搜索打造的类 grep 工具，只不过比 ack 更快
- asciinema 录制、分享 terminal session 的工具
- bat 类似于 httpie ,只不过是用 Golang 编写的
- ctop 类似 top，但用來監控 Docker container 的工具。
- gitsome 更強大、具备zi'dong完成的 Git/GitHub CLI
- htop 比 top 更強大的即时系统监控工具
- httpie 比 curl 更易用的 HTTP 命令列工具
- HTTP Prompt 基于 httpie 再另外加上自动完成功能
- pyenv Python 的多版本管理工具，可以和 Homebrew 所安裝的 Python 共存。可搭配 pyenv-virtualenv 管理 virtualenv
- m-cli macOS 平台的「瑞士刀」，直接在 terminal 控制电脑设定, 另外一套 Mac-CLI 功能也很類似
- mycli 具备 auto-completion、syntax highlighting 的 MySQL client
- nvm Node 的多版本管理工具
- gvm Golang 的多版本个管理工具
- speed-test 从命令列进行 speedtest.net 测速
- TLDR pages 真正給人阅读、长话的 man page，例如忘記 tar 指令怎样用使用 tldr tar 即可。
- zdict 直接在 command line 查字典的工具，预设来源是 Yahoo Dictionary，另外也支持多种其他来源

* Productivity

- LaunchBar6 : 搜索工具，和Mac系统集成太好了
- Magnet : 让窗口成比例的显示，在写代码调试的时候很方便
- Archiver：支持多种格式（包括 windows下的格式）的压缩/解压缩工具
- MWeb：国人写的一个Mardown工具，很好用
- MindeNode: 思维导图
- Surge：科学上网
- CheatSheet : 长按 command ，将能查看当前程序的快捷键
- Amphetamine：让电脑不眠不休的工作，类似工具 Caffeine 或 KeepingYouAwake 相比比较强大，例如支持触发。

* Office Apps

- Keynote
- Numbers
- Pages
- Microsoft Office

* 其他


- Google Chrome：浏览器
- 1Password : 跨平台的密码管理工具
- AppCleaner: 应用程序卸载工具
- Battery Health 2：显示电池信息
- Bartender 2: 管理菜单的工具

* 参考

- https://sourabhbajaj.com/mac-setup/

* Footnotes
* COMMENT Local Variables                          :ARCHIVE:
  # Local Variables:
  # org-hugo-auto-export-on-save: t
  # End:
